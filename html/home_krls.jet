<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <!-- CSS only -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
        integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>
        .chatbox {
            outline: 2px solid rgb(0, 0, 0);
            min-height: 160px;
            max-height: 300px;
            padding: 0.5em;
            word-break: break-all;
            overflow-y: scroll;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-3">This is the home page</h1>
                <hr>
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <h3>Chat</h3>
                <div class="col-md-6 form-group">
                    <label for="username">Username:</label>
                    <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                </div>
                <div class="form-group">
                    <label for="message">Message:</label>
                    <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                </div>
                <hr>
                <a href="javascript:void(0);" id="sendBtn" class="btn btn-outline-secondary mt-3">Send Message</a>

                <input type="hidden" name="action" id="action">
                <div class="row">
                    <hr>
                    <div class="col-md-6 ml-3 form-check form-switch float-start">
                        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                        <label class="form-check-label" for="flexSwitchCheckDefault">reverse text</label>
                    </div>

                    <div id="status" class="col-md-6"></div>
                </div>
                <div id="output" class="chatbox"></div>
            </div>
            <div class="col-md-4">
                <h3>Who is online</h3>
                <ul id="online_users">

                </ul>
            </div>
        </div>

    </div>

</body>

<!-- JavaScript Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3"
    crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
    integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script src="/static/reconnecting-websocket.min.js"></script>
<script>
    const psound = new Audio("/static/mixkit-sci-fi-confirmation-914.wav");
    let socket = null;
    let o = document.getElementById("output")
    let userField = document.getElementById("username")
    let messageField = document.getElementById("message")
    const sswitch = document.getElementById("flexSwitchCheckDefault")

    window.onbeforeunload = () => {
        console.log("Leaving")
        let jsonData = {}
        jsonData["action"] = "left"
        socket.send(JSON.stringify(jsonData))
    }

    document.addEventListener("DOMContentLoaded", function () {
        //socket = new WebSocket("ws://127.0.0.1:8080/ws")
        //socket = new WebSocket("ws://83.51.41.164:60002/ws")
        socket = new ReconnectingWebSocket("ws://localhost:60002/ws", null, { debug: true, reconnectInterval: 3000 })
        //socket = new ReconnectingWebSocket("ws://83.51.41.164:60002/ws", null, { debug: true, reconnectInterval: 3000 })

        const offline = `<span class="badge bg-danger mb-3 float-end">Not connected</span>`
        const online = `<span class="badge bg-success mb-3 float-end">Connected</span>`
        let statusDiv = document.getElementById("status")

        socket.onopen = () => {
            console.log("Successfully connected")
            statusDiv.innerHTML = online
        }

        socket.onclose = () => {
            console.log("connection closed")
            statusDiv.innerHTML = offline
        }

        socket.onerror = error => {
            console.log("there was an error")
            statusDiv.innerHTML = offline
        }

        socket.onmessage = msg => {
            //console.log(msg)
            //let j = JSON.parse(msg.data)
            //console.log(j)
            let data = JSON.parse(msg.data)
            console.log("Action is", data.action)

            switch (data.action) {
                case "ListUsers":
                    let ul = document.getElementById("online_users")
                    while (ul.firstChild) ul.removeChild(ul.firstChild)

                    if (data.connectedUsers.length > 0) {
                        data.connectedUsers.forEach(element => {
                            let li = document.createElement("li")
                            li.appendChild((document.createTextNode(element)))
                            ul.appendChild(li)
                        });
                    }
                    break
                case "broadcast":
                    if (!sswitch.checked) {
                        o.innerHTML = o.innerHTML + addDate() + ' - ' + data.message + "<br>"
                        scrollBar()
                    } else {
                        o.innerHTML = addDate() + ' - ' + data.message + "<br>" + o.innerHTML
                    }
                    if (data.username != userField.value) psound.play()
                    console.log(data)
                    break
            }

        }

        userField.addEventListener("change", function () {
            let jsonData = {}
            jsonData["action"] = "username"
            jsonData["username"] = this.value
            socket.send(JSON.stringify(jsonData))
        })
//        sswitch.oninput = () => {
//            console.log(sswitch.checked)
//        }

        const sendMessage = () => {
            let jsonData = {}
            jsonData["action"] = "broadcast"
            jsonData["username"] = userField.value
            jsonData["message"] = messageField.value
            socket.send(JSON.stringify(jsonData))
            messageField.value = ""
        }
        const addDate = () => {
            const d = new Date()
            return `[${d.toLocaleString()}]`
        }
        const scrollBar = () => {
            o.scrollTop = o.scrollHeight
        }

        messageField.addEventListener("keydown", function (event) {
            if (event.code === "Enter") {
                if (!socket) {
                    console.log("no connection")
                    return false
                }
                if ((userField.value === "") || (messageField.value == "")) {
                    errorMessage("fill out user and message")
                    return false
                } else {
                    sendMessage()
                }

                event.preventDefault()
                event.stopPropagation()
            }
        })

        document.getElementById("sendBtn").addEventListener("click", () => {
            if ((userField.value === "") || (messageField.value == "")) {
                errorMessage("fill out user and message")
                return false
            } else {
                sendMessage()
            }
        })

    })

    const errorMessage = (msg) => {
        notie.alert({
            type: 'error',
            text: msg,
        })
    }
</script>

</html>